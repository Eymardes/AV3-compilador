
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\004" +
    "\004\000\002\004\003\000\002\003\007\000\002\003\011" +
    "\000\002\003\007\000\002\003\005\000\002\003\006\000" +
    "\002\003\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\014\004\013\006\011\007\006\026\010\032" +
    "\005\001\002\000\004\002\070\001\002\000\004\016\065" +
    "\001\002\000\012\024\021\030\017\031\016\032\015\001" +
    "\002\000\020\002\ufffe\004\ufffe\006\ufffe\007\ufffe\026\ufffe" +
    "\027\ufffe\032\ufffe\001\002\000\014\004\013\006\011\007" +
    "\006\026\010\032\005\001\002\000\004\024\055\001\002" +
    "\000\016\002\000\004\013\006\011\007\006\026\010\032" +
    "\005\001\002\000\004\024\014\001\002\000\012\024\021" +
    "\030\017\031\016\032\015\001\002\000\032\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\014\uffea\015\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\025\uffea\001\002\000\032\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\001\002\000" +
    "\032\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\025\uffec\001" +
    "\002\000\030\010\033\011\034\012\026\013\027\014\030" +
    "\015\035\017\023\020\025\021\031\022\032\025\050\001" +
    "\002\000\012\024\021\030\017\031\016\032\015\001\002" +
    "\000\030\010\033\011\034\012\026\013\027\014\030\015" +
    "\035\017\023\020\025\021\031\022\032\025\024\001\002" +
    "\000\012\024\021\030\017\031\016\032\015\001\002\000" +
    "\032\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed\025\uffed\001" +
    "\002\000\012\024\021\030\017\031\016\032\015\001\002" +
    "\000\012\024\021\030\017\031\016\032\015\001\002\000" +
    "\012\024\021\030\017\031\016\032\015\001\002\000\012" +
    "\024\021\030\017\031\016\032\015\001\002\000\012\024" +
    "\021\030\017\031\016\032\015\001\002\000\012\024\021" +
    "\030\017\031\016\032\015\001\002\000\012\024\021\030" +
    "\017\031\016\032\015\001\002\000\012\024\021\030\017" +
    "\031\016\032\015\001\002\000\012\024\021\030\017\031" +
    "\016\032\015\001\002\000\032\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\017\023\020\025\021\031\022" +
    "\032\023\ufff4\025\ufff4\001\002\000\032\010\ufff6\011\ufff6" +
    "\012\026\013\027\014\030\015\035\017\023\020\025\021" +
    "\031\022\032\023\ufff6\025\ufff6\001\002\000\032\010\ufff7" +
    "\011\ufff7\012\026\013\027\014\030\015\035\017\023\020" +
    "\025\021\031\022\032\023\ufff7\025\ufff7\001\002\000\032" +
    "\010\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\023\uffee\025\uffee\001\002" +
    "\000\032\010\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\025\uffef" +
    "\001\002\000\032\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\017\023\020\025\021\031\022\032\023\ufff2" +
    "\025\ufff2\001\002\000\032\010\ufff5\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\017\023\020\025\021\031\022\032" +
    "\023\ufff5\025\ufff5\001\002\000\032\010\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\017\023\020\025\021\031" +
    "\022\032\023\ufff3\025\ufff3\001\002\000\032\010\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\021\031\022\032\023\ufff0\025\ufff0\001\002\000\032\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1" +
    "\020\ufff1\021\031\022\032\023\ufff1\025\ufff1\001\002\000" +
    "\014\004\013\006\011\007\006\026\010\032\005\001\002" +
    "\000\022\002\ufffd\004\ufffd\005\052\006\ufffd\007\ufffd\026" +
    "\ufffd\027\ufffd\032\ufffd\001\002\000\014\004\013\006\011" +
    "\007\006\026\010\032\005\001\002\000\022\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\026\ufffc\027\ufffc\032\ufffc" +
    "\001\002\000\020\002\uffff\004\uffff\006\uffff\007\uffff\026" +
    "\uffff\027\uffff\032\uffff\001\002\000\012\024\021\030\017" +
    "\031\016\032\015\001\002\000\030\010\033\011\034\012" +
    "\026\013\027\014\030\015\035\017\023\020\025\021\031" +
    "\022\032\025\057\001\002\000\014\004\013\006\011\007" +
    "\006\026\010\032\005\001\002\000\022\002\ufffb\004\ufffb" +
    "\005\ufffb\006\ufffb\007\ufffb\026\ufffb\027\ufffb\032\ufffb\001" +
    "\002\000\016\004\013\006\011\007\006\026\010\027\062" +
    "\032\005\001\002\000\022\002\ufff8\004\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\026\ufff8\027\ufff8\032\ufff8\001\002\000\030" +
    "\010\033\011\034\012\026\013\027\014\030\015\035\017" +
    "\023\020\025\021\031\022\032\023\064\001\002\000\022" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\026\ufffa\027" +
    "\ufffa\032\ufffa\001\002\000\012\024\021\030\017\031\016" +
    "\032\015\001\002\000\030\010\033\011\034\012\026\013" +
    "\027\014\030\015\035\017\023\020\025\021\031\022\032" +
    "\023\067\001\002\000\022\002\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\026\ufff9\027\ufff9\032\ufff9\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\066\000\010\002\003\003\006\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\062\001\001" +
    "\000\002\001\001\000\006\003\006\004\060\001\001\000" +
    "\002\001\001\000\004\003\053\001\001\000\002\001\001" +
    "\000\004\005\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\021" +
    "\001\001\000\002\001\001\000\004\005\046\001\001\000" +
    "\002\001\001\000\004\005\045\001\001\000\004\005\044" +
    "\001\001\000\004\005\043\001\001\000\004\005\042\001" +
    "\001\000\004\005\041\001\001\000\004\005\040\001\001" +
    "\000\004\005\037\001\001\000\004\005\036\001\001\000" +
    "\004\005\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\050\001\001\000" +
    "\002\001\001\000\004\003\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\055\001\001\000\002\001" +
    "\001\000\004\003\057\001\001\000\002\001\001\000\004" +
    "\003\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Statements ::= Statements Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Statements ::= Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Statement ::= IF AP Expr FP Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Statement ::= IF AP Expr FP Statement ELSE Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Statement ::= WHILE AP Expr FP Statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Statement ::= RETURN Expr PV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Statement ::= ID ATRIBUI Expr PV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statement ::= AC Statements FC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statement",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Expr ::= Expr IGUAL Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Expr ::= Expr DIFERENTE Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= Expr MENOR Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= Expr MENOR_IGUAL Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= Expr MAIOR Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= Expr MAIOR_IGUAL Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= Expr MAIS Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= Expr MENOS Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= Expr MULT Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= AP Expr FP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= NUM_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= NUM_FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
