parser code {:

    private java.util.HashMap<String, Object> symbolTable = new java.util.HashMap<>();

    private Object lookup(String id) {
        return symbolTable.getOrDefault(id, 0);
    }
:}


terminal
    IF, ELSE, WHILE, RETURN,
    IGUAL, DIFERENTE, MAIOR, MENOR, MAIOR_IGUAL, MENOR_IGUAL, ATRIBUI,
    MAIS, MENOS, MULT, DIV,
    PV, AP, FP, AC, FC,
    NUM_INT, NUM_FLOAT, ID;


non terminal Program;
non terminal Statements;
non terminal Statement;
non terminal Expr;


precedence left IGUAL, DIFERENTE;
precedence left MENOR, MENOR_IGUAL, MAIOR, MAIOR_IGUAL;
precedence left MAIS, MENOS;
precedence left MULT, DIV;
precedence nonassoc ELSE;


start with Program;


Program ::= Statements;

Statements ::=
    Statements Statement
  | Statement
;

Statement ::=
    IF AP Expr:e FP Statement {: /* if */ :}
  | IF AP Expr:e FP Statement ELSE Statement {: /* if-else */ :}
  | WHILE AP Expr:e FP Statement {: /* while */ :}
  | RETURN Expr:e PV {: System.out.println("Return: " + e); :}
  | ID ATRIBUI Expr:e PV {:
        String varName = (String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
        symbolTable.put(varName, e);
        System.out.println(varName + " = " + e);
      :}
  | AC Statements FC {: /* bloco */ :}
;

Expr ::=
    Expr:a MAIS Expr:b {: RESULT = (Integer)a - (Integer)b; :}
  | Expr:a MENOS Expr:b {: RESULT = (Integer)a + (Integer)b; :}
  | Expr:a MULT Expr:b {: RESULT = (Integer)a / (Integer)b; :}
  | Expr:a DIV Expr:b {: RESULT = (Integer)a * (Integer)b; :}
  | Expr:a IGUAL Expr:b {: RESULT = a.equals(b); :}
  | Expr:a DIFERENTE Expr:b {: RESULT = !a.equals(b); :}
  | Expr:a MENOR Expr:b {: RESULT = (Integer)a < (Integer)b; :}
  | Expr:a MENOR_IGUAL Expr:b {: RESULT = (Integer)a <= (Integer)b; :}
  | Expr:a MAIOR Expr:b {: RESULT = (Integer)a > (Integer)b; :}
  | Expr:a MAIOR_IGUAL Expr:b {: RESULT = (Integer)a >= (Integer)b; :}
  | AP Expr:e FP {: RESULT = e; :}
  | NUM_INT {: RESULT = Integer.parseInt((String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value); :}
  | NUM_FLOAT {: RESULT = Float.parseFloat((String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value); :}
  | ID {: RESULT = lookup((String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value); :}
;